
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { Database } from './types/supabase'; // This will be generated by Supabase CLI

// üöß DEVELOPMENT/PREVIEW ONLY: Hardcoded Supabase credentials üöß
// Replace with your actual Supabase project URL and anon key for testing in AI Studio.
// üö® IMPORTANT: Do NOT use hardcoded keys in a production environment.
const LOCAL_DEV_SUPABASE_URL = "https://your-project-id.supabase.co"; // ‚¨ÖÔ∏è SET YOUR ACTUAL URL HERE FOR PREVIEW
const LOCAL_DEV_SUPABASE_ANON_KEY = "your-anon-key"; // ‚¨ÖÔ∏è SET YOUR ACTUAL ANON KEY HERE FOR PREVIEW

// Attempt to use environment variables first (for standard environments)
// Fallback to hardcoded values if process.env is not available or vars are not set
const supabaseUrl = (globalThis as any).process?.env?.SUPABASE_URL || LOCAL_DEV_SUPABASE_URL;
const supabaseAnonKey = (globalThis as any).process?.env?.SUPABASE_ANON_KEY || LOCAL_DEV_SUPABASE_ANON_KEY;

let supabaseInstance: SupabaseClient<Database> | null = null;

if (!supabaseUrl || supabaseUrl === "https://your-project-id.supabase.co") {
  console.warn(
    "Supabase URL is not configured or is using the default placeholder. " +
    "Please update SUPABASE_URL in supabaseClient.ts or set the environment variable for Supabase features to work."
  );
} else if (!supabaseAnonKey || supabaseAnonKey === "your-anon-key") {
  console.warn(
    "Supabase Anon Key is not configured or is using the default placeholder. " +
    "Please update SUPABASE_ANON_KEY in supabaseClient.ts or set the environment variable for Supabase features to work."
  );
} else {
  // Initialize the Supabase client using the defined variables
  try {
    supabaseInstance = createClient<Database>(supabaseUrl, supabaseAnonKey);
  } catch (e: any) {
    console.error("CRITICAL ERROR: Failed to initialize Supabase client even with URL/Key. Error:", e.message);
    // supabaseInstance remains null
  }
}

export const supabase = supabaseInstance;

// Log initialization status
console.log("Supabase status:", supabase ? "‚úÖ Initialized" : "‚ùå FAILED to initialize");
if (supabase) {
  console.log("Supabase client initialized with URL:", supabaseUrl.substring(0, supabaseUrl.indexOf('.supabase.co') + '.supabase.co'.length) + "..."); // Log only part of the URL for brevity/security
}


// Note: The user prompt indicates `process.env.API_KEY` is for Gemini.
// Here, we explicitly use `SUPABASE_URL` and `SUPABASE_ANON_KEY` (via supabaseUrl, supabaseAnonKey) for Supabase.
// It's assumed these are available in the environment or hardcoded as per LOCAL_DEV values.
    