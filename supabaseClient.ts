
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { Database } from './types/supabase'; // This will be generated by Supabase CLI

// Ensure these environment variables are set in your deployment environment
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

let supabaseInstance: SupabaseClient<Database> | null = null;

if (!supabaseUrl || !supabaseAnonKey) {
  console.warn(
    "Supabase Environment Variables Missing: SUPABASE_URL and/or SUPABASE_ANON_KEY were not found in the environment. Supabase features will be disabled.\n" +
    "For development with client-side projects (e.g., using index.html directly or with simple ESM loading), ensure your development server or build process makes these variables available via 'process.env'. They are typically not accessible by default in a plain browser environment.\n" +
    "For production, these variables must be configured in your deployment environment."
  );
  // supabaseInstance remains null, indicating Supabase is not configured/available.
} else {
  // Initialize the Supabase client
  // The Database type parameter enables type-safety with your Supabase schema.
  try {
    supabaseInstance = createClient<Database>(supabaseUrl, supabaseAnonKey);
  } catch (e: any) {
    console.error("CRITICAL ERROR: Failed to initialize Supabase client even with URL/Key. Error:", e.message);
    // supabaseInstance remains null
  }
}

export const supabase = supabaseInstance;

// Note: The user prompt indicates `process.env.API_KEY` is for Gemini.
// Here, we explicitly use `SUPABASE_URL` and `SUPABASE_ANON_KEY` for Supabase.
// It's assumed these are available in the environment.
