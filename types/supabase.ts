// This file should be generated by Supabase CLI using:
// supabase gen types typescript --project-id YOUR_PROJECT_ID --schema public > types/supabase.ts
// 
// This is a manually constructed version based on the provided SQL schema.
// Ensure it's accurate or regenerate with Supabase CLI for production.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      patients: { // EXISTING TABLE
        Row: {
          id: string // uuid, primary key
          created_at: string // timestamp with time zone, default now()
          full_name: string // text, not null
          email: string // text, unique, not null
          phone: string // text, not null
        }
        Insert: {
          id?: string // Default is gen_random_uuid()
          created_at?: string // Default is now()
          full_name: string
          email: string
          phone: string
        }
        Update: {
          id?: string
          created_at?: string
          full_name?: string
          email?: string
          phone?: string
        }
        Relationships: []
      }
      services: { // EXISTING TABLE
        Row: {
          id: string // uuid, primary key
          created_at?: string // timestamp with time zone, default now()
          name: string // text, not null
          description?: string | null // text
          category?: string | null // text (maps to ServiceCategory enum)
          price_per_hour?: number | null // numeric
          is_active?: boolean // boolean, default true
        }
        Insert: {
          id?: string // Default is gen_random_uuid()
          created_at?: string
          name: string
          description?: string | null
          category?: string | null
          price_per_hour?: number | null
          is_active?: boolean
        }
        Update: {
          id?: string
          created_at?: string
          name?: string
          description?: string | null
          category?: string | null
          price_per_hour?: number | null
          is_active?: boolean
        }
        Relationships: []
      }
      caregivers: { // EXISTING TABLE
        Row: {
          id: string
          created_at: string 
          full_name: string 
          email: string | null 
          phone: string | null 
          profile_image_url: string | null 
          skills: Json | null 
          certifications: Json | null 
          notes: string | null 
          tags: Json | null 
          status: string 
        }
        Insert: {
          id?: string
          created_at?: string
          full_name: string
          email?: string | null
          phone?: string | null
          profile_image_url?: string | null
          skills?: Json | null
          certifications?: Json | null
          notes?: string | null
          tags?: Json | null
          status?: string
        }
        Update: {
          id?: string
          created_at?: string
          full_name?: string
          email?: string | null
          phone?: string | null
          profile_image_url?: string | null
          skills?: Json | null
          certifications?: Json | null
          notes?: string | null
          tags?: Json | null
          status?: string
        }
        Relationships: []
      }
      caregiver_shifts: { // EXISTING TABLE
        Row: {
          id: string
          caregiver_id: string | null 
          patient_id: string | null 
          shift_date: string | null 
          start_time: string | null 
          end_time: string | null 
          location: string | null 
          notes: string | null 
          status: string 
          created_at: string 
        }
        Insert: {
          id?: string
          caregiver_id?: string | null
          patient_id?: string | null
          shift_date?: string | null
          start_time?: string | null
          end_time?: string | null
          location?: string | null
          notes?: string | null
          status?: string
          created_at?: string
        }
        Update: {
          id?: string
          caregiver_id?: string | null
          patient_id?: string | null
          shift_date?: string | null
          start_time?: string | null
          end_time?: string | null
          location?: string | null
          notes?: string | null
          status?: string
          created_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "caregiver_shifts_caregiver_id_fkey"
            columns: ["caregiver_id"]
            referencedRelation: "caregivers"
            referencedColumns: ["id"]
          }
        ]
      }
      caregiver_documents: { // EXISTING TABLE
        Row: {
          id: string
          caregiver_id: string | null 
          doc_url: string | null 
          doc_type: string | null 
          expires_on: string | null 
          uploaded_at: string 
        }
        Insert: {
          id?: string
          caregiver_id?: string | null
          doc_url?: string | null
          doc_type?: string | null
          expires_on?: string | null
          uploaded_at?: string
        }
        Update: {
          id?: string
          caregiver_id?: string | null
          doc_url?: string | null
          doc_type?: string | null
          expires_on?: string | null
          uploaded_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "caregiver_documents_caregiver_id_fkey"
            columns: ["caregiver_id"]
            referencedRelation: "caregivers"
            referencedColumns: ["id"]
          }
        ]
      }
      caregiver_incidents: { // EXISTING TABLE
        Row: {
          id: string
          caregiver_id: string | null 
          type: string | null 
          description: string | null 
          added_by: string | null 
          created_at: string 
        }
        Insert: {
          id?: string
          caregiver_id?: string | null
          type?: string | null
          description?: string | null
          added_by?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          caregiver_id?: string | null
          type?: string | null
          description?: string | null
          added_by?: string | null
          created_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "caregiver_incidents_caregiver_id_fkey"
            columns: ["caregiver_id"]
            referencedRelation: "caregivers"
            referencedColumns: ["id"]
          }
        ]
      }
      caregiver_notifications: { // EXISTING TABLE (This table is for admin-sent messages, distinct from automated system notifications)
        Row: {
          id: string
          caregiver_id: string | null 
          type: string | null // Renamed to 'title' in app types. DB 'type' might be broad category.
          message: string | null 
          method: string | null 
          status: string 
          created_at: string 
        }
        Insert: {
          id?: string
          caregiver_id?: string | null
          type?: string | null
          message?: string | null
          method?: string | null
          status?: string
          created_at?: string
        }
        Update: {
          id?: string
          caregiver_id?: string | null
          type?: string | null
          message?: string | null
          method?: string | null
          status?: string
          created_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "caregiver_notifications_caregiver_id_fkey"
            columns: ["caregiver_id"]
            referencedRelation: "caregivers"
            referencedColumns: ["id"]
          }
        ]
      }
      bookings: { // EXISTING TABLE
        Row: {
          id: string
          patient_id: string | null 
          caregiver_id: string | null 
          service: string | null 
          location: string | null 
          booking_date: string | null 
          start_time: string | null 
          end_time: string | null 
          notes: string | null 
          status: string 
          created_at: string 
        }
        Insert: {
          id?: string
          patient_id?: string | null
          caregiver_id?: string | null
          service?: string | null
          location?: string | null
          booking_date?: string | null
          start_time?: string | null
          end_time?: string | null
          notes?: string | null
          status?: string
          created_at?: string
        }
        Update: {
          id?: string
          patient_id?: string | null
          caregiver_id?: string | null
          service?: string | null
          location?: string | null
          booking_date?: string | null
          start_time?: string | null
          end_time?: string | null
          notes?: string | null
          status?: string
          created_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "bookings_caregiver_id_fkey"
            columns: ["caregiver_id"]
            referencedRelation: "caregivers"
            referencedColumns: ["id"]
          },
          { 
            foreignKeyName: "bookings_patient_id_fkey"
            columns: ["patient_id"]
            referencedRelation: "patients" 
            referencedColumns: ["id"]
          }
        ]
      }
      booking_logs: { // EXISTING TABLE
        Row: {
          id: string
          booking_id: string | null 
          action: string | null 
          admin_user: string | null 
          notes: string | null 
          timestamp: string 
        }
        Insert: {
          id?: string
          booking_id?: string | null
          action?: string | null
          admin_user?: string | null
          notes?: string | null
          timestamp?: string
        }
        Update: {
          id?: string
          booking_id?: string | null
          action?: string | null
          admin_user?: string | null
          notes?: string | null
          timestamp?: string
        }
        Relationships: [
          {
            foreignKeyName: "booking_logs_booking_id_fkey"
            columns: ["booking_id"]
            referencedRelation: "bookings"
            referencedColumns: ["id"]
          }
        ]
      }
      payment_gateways: { // EXISTING TABLE
        Row: {
          id: string 
          type: string | null 
          handle: string | null 
          instructions: string | null 
          qr_url: string | null 
          is_active: boolean 
          created_at: string 
        }
        Insert: {
          id?: string
          type: string 
          handle?: string | null
          instructions?: string | null
          qr_url?: string | null
          is_active?: boolean
          created_at?: string
        }
        Update: {
          id?: string
          type?: string 
          handle?: string | null
          instructions?: string | null
          qr_url?: string | null
          is_active?: boolean
          created_at?: string
        }
        Relationships: []
      }
      service_pricing: { // EXISTING TABLE
        Row: {
          id: string 
          service_name: string | null 
          description: string | null 
          price: number | null 
          taxable: boolean 
          created_at: string 
        }
        Insert: {
          id?: string
          service_name: string 
          description?: string | null
          price: number 
          taxable?: boolean
          created_at?: string
        }
        Update: {
          id?: string
          service_name?: string
          description?: string | null
          price?: number
          taxable?: boolean
          created_at?: string
        }
        Relationships: []
      }
      payments: { // EXISTING TABLE
        Row: {
          id: string 
          patient_id: string | null 
          description: string | null 
          amount: number | null 
          method: string | null 
          status: string 
          created_at: string 
        }
        Insert: {
          id?: string
          patient_id?: string | null
          description: string 
          amount: number 
          method?: string | null
          status?: string
          created_at?: string
        }
        Update: {
          id?: string
          patient_id?: string | null
          description?: string
          amount?: number
          method?: string | null
          status?: string
          created_at?: string
        }
        Relationships: [] // Potentially add FK to patients table
      }
      subscriptions: { // EXISTING TABLE
        Row: {
          id: string 
          patient_id: string | null 
          plan_name: string | null 
          price: number | null 
          duration: string | null 
          start_date: string | null 
          end_date: string | null 
          status: string 
          created_at: string 
        }
        Insert: {
          id?: string
          patient_id?: string | null
          plan_name: string 
          price: number 
          duration: string 
          start_date?: string | null
          end_date?: string | null
          status?: string
          created_at?: string
        }
        Update: {
          id?: string
          patient_id?: string | null
          plan_name?: string
          price?: number
          duration?: string
          start_date?: string | null
          end_date?: string | null
          status?: string
          created_at?: string
        }
        Relationships: [] // Potentially add FK to patients table
      }
      refunds: { // EXISTING TABLE
        Row: {
          id: string 
          payment_id: string | null 
          reason: string | null 
          proof_url: string | null 
          refunded_on: string 
          amount: number | null 
          status: string | null 
        }
        Insert: {
          id?: string
          payment_id: string 
          reason: string 
          proof_url?: string | null
          refunded_on?: string
          amount: number 
          status: string 
        }
        Update: {
          id?: string
          payment_id?: string
          reason?: string
          proof_url?: string | null
          refunded_on?: string
          amount?: number
          status?: string
        }
        Relationships: [
          {
            foreignKeyName: "refunds_payment_id_fkey"
            columns: ["payment_id"]
            referencedRelation: "payments"
            referencedColumns: ["id"]
          }
        ]
      }
      audit_log: { // EXISTING TABLE
        Row: {
          id: string 
          module: string | null 
          action: string | null 
          user: string | null 
          target_id: string | null 
          notes: string | null 
          timestamp: string 
        }
        Insert: {
          id?: string
          module: string 
          action: string 
          user?: string | null
          target_id?: string | null
          notes?: string | null
          timestamp?: string
        }
        Update: {
          id?: string
          module?: string
          action?: string
          user?: string | null
          target_id?: string | null
          notes?: string | null
          timestamp?: string
        }
        Relationships: []
      }
      // --- NEW TABLES FOR NOTIFICATIONS ---
      notification_logs: {
        Row: {
          id: string // uuid, primary key
          user_id: string | null // uuid, can be patient_id or caregiver_id
          recipient_contact: string // text, email or phone
          notification_type: string // text, e.g., from NotificationType enum
          medium: string // text, 'EMAIL' or 'SMS'
          status: string // text, e.g., 'SENT', 'FAILED', 'PENDING_RETRY'
          subject: string | null // text, for email subject
          body: string | null // text, for email/SMS body or template identifier
          error_message: string | null // text, if status is 'FAILED'
          reference_id: string | null // text, e.g., booking_id
          created_at: string // timestamp with time zone, default now()
        }
        Insert: {
          id?: string // Default is gen_random_uuid()
          user_id?: string | null
          recipient_contact: string
          notification_type: string
          medium: string
          status: string
          subject?: string | null
          body?: string | null
          error_message?: string | null
          reference_id?: string | null
          created_at?: string // Default is now()
        }
        Update: { // Logs are typically not updated, but status might be
          id?: string
          user_id?: string | null
          recipient_contact?: string
          notification_type?: string
          medium?: string
          status?: string
          subject?: string | null
          body?: string | null
          error_message?: string | null
          reference_id?: string | null
          created_at?: string
        }
        Relationships: [
          // Optional: Add FK to patients or caregivers if user_id is strictly one of them
          // {
          //   foreignKeyName: "notification_logs_user_id_fkey_patient" 
          //   columns: ["user_id"]
          //   referencedRelation: "patients"
          //   referencedColumns: ["id"]
          // },
          // {
          //   foreignKeyName: "notification_logs_user_id_fkey_caregiver"
          //   columns: ["user_id"]
          //   referencedRelation: "caregivers"
          //   referencedColumns: ["id"]
          // }
        ]
      }
      notification_event_settings: {
        Row: {
          id: string // uuid, primary key
          event_type: string // text, unique, e.g., from NotificationType enum
          email_enabled: boolean // boolean, default true
          sms_enabled: boolean // boolean, default false
          description: string | null // text, for admin panel display
          updated_at: string // timestamp with time zone, default now()
        }
        Insert: {
          id?: string // Default is gen_random_uuid()
          event_type: string
          email_enabled?: boolean
          sms_enabled?: boolean
          description?: string | null
          updated_at?: string // Default is now()
        }
        Update: {
          id?: string
          event_type?: string
          email_enabled?: boolean
          sms_enabled?: boolean
          description?: string | null
          updated_at?: string
        }
        Relationships: []
      }
    } // end Tables
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      // Assuming enums are handled at app level or as text constraints in DB
    }
    CompositeTypes: {
      [_ in never]: never
    }
  } // end public
} // end Database
